- name: Assert Required Variables are Defined
  ansible.builtin.assert:
    that:
      - vm_power_state is defined
      - vm_power_state.name is defined
      - vm_power_state.namespace is  defined
      - vm_power_state.running is defined
      - vm_power_state.run_strategy is defined

# For API calls using the uri module, if credentials are not explicitly passed to the role
#  using k8s_auth_api_key/k8s_auth_host variables then attempt to find credentials using
#  K8S_AUTH_* environment variables or a KUBECONFIG file.

##
# TODO: Verify VM Exists, Also Verify State

- name: Find Credentials Using Environment Variables or KUBECONFIG
  ansible.builtin.include_role:
    name: k8s-setup-auth
  when:
    - (k8s_auth_api_key is not defined) or (k8s_auth_host is not defined)

- name: Power off Virtual Machine
  when:
    - not vm_power_state.running
  block:
    - name: Validate Run Strategy
      ansible.builtin.assert:
        fail_msg: "run_strategy must be one of { {{- _run_strategy_required_off | join(',') -}} }"
        that:
          - vm_power_state.run_strategy in _run_strategy_required_off

    - name: Set Run Strategy
      kubernetes.core.k8s:
        resource_definition:
          apiVersion: kubevirt.io/v1
          kind: VirtualMachine
          metadata:
            name: "{{ vm_power_state.name | lower }}"
            namespace: "{{ vm_power_state.namespace }}"
          spec:
            runStrategy: "{{ vm_power_state.run_strategy }}"
        validate_certs: "{{ k8s_auth_verify_ssl }}"

    - name: Use API to Power Off VM
      vars:
        _uri: "/apis/subresources.kubevirt.io/v1/namespaces/{{ vm_power_state.namespace }}/virtualmachines/{{ vm_power_state.name }}/stop"
      ansible.builtin.uri:
        headers:
          Authorization: "Bearer {{ k8s_auth_api_key }}"
        method: PUT
        status_code:
          - 202
        url: "{{ k8s_auth_host }}{{ _uri }}"
        validate_certs: "{{ k8s_auth_verify_ssl }}"
      when:
        - vm_power_state.run_strategy != "Halted"
        - not (vm_power_state.force | default(false))

    - name: Use API to Power Off VM (Force Off)
      vars:
        _uri: "/apis/subresources.kubevirt.io/v1/namespaces/{{ vm_power_state.namespace }}/virtualmachines/{{ vm_power_state.name }}/stop"
      ansible.builtin.uri:
        body:
          gracePeriod: 0
        body_format: json
        headers:
          Authorization: "Bearer {{ k8s_auth_api_key }}"
        method: PUT
        status_code:
          - 202
        url: "{{ k8s_auth_host }}{{ _uri }}"
        validate_certs: "{{ k8s_auth_verify_ssl }}"
      when:
        - vm_power_state.run_strategy != "Halted"
        - vm_power_state.force | default(false)

- name: Power on Virtual Machine
  when:
    - vm_power_state.running
  block:
    - name: Validate Run Strategy
      ansible.builtin.assert:
        fail_msg: "run_strategy must be one of { {{- _run_strategy_required_on | join(',') -}} }"
        that:
          - vm_power_state.run_strategy in _run_strategy_required_on

    - name: Set Run Strategy
      kubernetes.core.k8s:
        resource_definition:
          apiVersion: kubevirt.io/v1
          kind: VirtualMachine
          metadata:
            name: "{{ vm_power_state.name | lower }}"
            namespace: "{{ vm_power_state.namespace }}"
          spec:
            runStrategy: "{{ vm_power_state.run_strategy }}"
        validate_certs: "{{ k8s_auth_verify_ssl }}"

    - name: Use API to Power on VM
      vars:
        _uri: "/apis/subresources.kubevirt.io/v1/namespaces/{{ vm_power_state.namespace }}/virtualmachines/{{ vm_power_state.name }}/start"
      ansible.builtin.uri:
        headers:
          Authorization: "Bearer {{ k8s_auth_api_key }}"
        method: PUT
        status_code:
          - 202
        url: "{{ k8s_auth_host }}{{ _uri }}"
        validate_certs: "{{ k8s_auth_verify_ssl }}"
      when:
        - vm_power_state.run_strategy == "Manual"
